-- Setup. DO NOT REMOVE.
.headers on
.mode list
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies(
    id INTEGER,
    name TEXT,
    score INTEGER
);

CREATE TABLE cast(
    movie_id INTEGER,
    cast_id INTEGER,
    cast_name TEXT
);
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import movie-name-score.txt movies
.import movie-cast.txt cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index
ON movies (score);

CREATE INDEX cast_index
ON cast (cast_id);

CREATE INDEX movie_index
ON movies (id);
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]
SELECT avg(score)
FROM movies
WHERE score >= 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]
SELECT *
FROM movies
ORDER BY score, name ASC
LIMIT 5;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id, cast_name, COUNT(*) AS movie_count
FROM cast
GROUP BY cast_id
HAVING COUNT(*) = 2
ORDER BY cast_name ASC
LIMIT 10;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_id, cast_name, avg(score) AS average_score
FROM cast INNER JOIN movies ON movie_id = id
WHERE score >= 40
GROUP BY cast_id
HAVING count(*) > 2
ORDER BY avg(score) DESC, cast_name ASC
LIMIT 10;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]
CREATE VIEW good_collaboration AS
SELECT t1.cast_id AS cast_member_id1, t2.cast_id AS cast_member_id2, COUNT(*) AS movie_count, AVG(score) AS average_movie_score
FROM (cast AS t1 INNER JOIN cast AS t2 ON t1.movie_id = t2.movie_id) INNER JOIN movies ON t1.movie_id = movies.id
WHERE t1.cast_id < t2.cast_id
GROUP BY t1.cast_id, t2.cast_id
HAVING COUNT(*) >= 3 AND AVG(score) >= 50;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]
SELECT cast_member_id, cast_name, AVG(average_movie_score) AS collaboration_score
FROM (
SELECT cast_member_id1 as cast_member_id, average_movie_score FROM good_collaboration
UNION ALL SELECT cast_member_id2 as cast_member_id, average_movie_score FROM good_collaboration
) INNER JOIN cast ON cast_member_id = cast_id
GROUP BY cast_member_id
ORDER BY AVG(average_movie_score) DESC, cast_name ASC
LIMIT 5;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview USING fts4(
    id INTEGER,
    name TEXT,
    year INTEGER,
    overview TEXT,
    popularity DECIMAL
);
.import movie-overview.txt movie_overview
-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(*)
FROM movie_overview
WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]
SELECT id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --